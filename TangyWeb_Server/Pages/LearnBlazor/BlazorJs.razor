@page "/learnblazor/blazorjs"
@inject IJSRuntime _jsRuntime

<h3>BlazorJs</h3>

<div class="row">
	<button class="btn btn-secondary m-2" style="width:200px;" @onclick="TestConfirmBox">Test Confirm Button</button>
</div>
<div class="row">
	<button class="btn btn-success m-2" style="width:200px;" @onclick="ToastrSuccess">Toaster Success</button>
	<button class="btn btn-danger m-2" style="width:200px;" @onclick="ToastrFailure">Toaster Failure</button>
</div>
<br />
<div class="row">
	<button class="btn btn-success m-2" style="width:200px;" @onclick="SweetAlertSuccess">SweetAlert Success</button>
	<button class="btn btn-danger m-2" style="width:200px;" @onclick="SweetAlertFailure">SweetAlert Failure</button>
</div>

<div class="row">
	@if (ConfirmResult)
	{
		<p>Confirmation has been made!</p>
	}
	else
	{
		<p>Confirmation Pending!</p>
	}
</div>

@code {
	private string ConfirmMessage = "Are you sure you want to click?";
	private bool ConfirmResult { get; set; }

	private async Task TestConfirmBox()
	{
		ConfirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
	}

	private async Task ToastrSuccess()
	{
		await _jsRuntime.ToastrSuccess("Operationg Successful");
	}

	private async Task ToastrFailure()
	{
		await _jsRuntime.ToastrError("Operationg Failed");
	}

	private async Task SweetAlertSuccess()
	{
		await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
	}

	private async Task SweetAlertFailure()
	{
		await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
	}
}